import pygame
import numpy as np

#use one of the "cool effects" functions in addition 
#of the black_and_white one
def image_to_array(img):
	return black_and_white(pygame.surfarray.array3d(img))
	
def array_to_image(array):
	return pygame.surfarray.make_surface(array)

#》~~~~~~~~~~>	Cool Effects 	<~~~~~~~~~~《
def black_and_white(array):
	return np.array([[ [sum(x)*0.3]*3 for x in y]for y in array])

def filter(array, value): #the value needs to be a list of 3 numbers between 0 to 1, that define the percentage of each RGB argument to be left
	return array*value #some good ones: (0.9, 0.8, 0.2), (0.2, 0.8, 0.9), (0.3,0.2,0.8)
#if u use numbers greater than 1 in filter, the image gets a glitchy effect, preety poggers

def invert(array):
	return 255-array


#more functions will be added soon
pygame.init()

img = pygame.image.load('image.jpg') #here you put the name of the image, after saving it on the same folder as this file

pixels = image_to_array(img)
output = array_to_image(pixels)

pygame.image.save(output, 'output.jpg')
pygame.quit()
